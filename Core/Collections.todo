Вольный перевод-конспект источника - <https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html>

Обзор:
  Зачем нужен Collection Framework:
  1. *Сокращение объёма/усилия разработки* через имплементацию решений готовых структур и алгоритмов
  2. *Улучшает производительность* через имплементацию готовых хай-перформанс алгоритмов и структур
  3. *Улучает взаимодействие несвязанных API* через общие коллекции
  4. *Сокращает усилия по разработке и внедрения АПИ* - проподает необходимость создания структур для конкретного случая
  5. *Способствует переиспользовыванию кода* через готовые интерфейсы стурктур данных

  Collection Framework состоит из:
  1. *Интерфейсы коллекций*
  2. *Имплементации общего порядка (основных)* - сеты, списки и т.д.
  3. *Устаревшие импелемнтаций* - Vector и Hashtable
  4. *Имплементации особого порядка* имплементации для особых ситуаций, со спецефичискими характеристиками
  5. *Многопоточные имплементации*
  6. *Импелементации-обёртки* обычно расширяют функциональность существующих импелемнтации
  7. *Выгодные-имплементации* маленькие высокопроизводительные имплементации
      (не уверен на счет перевода Convenience implementations) 
  8. *Абстрактные имплементации* частичные имплементации интерфейсов коллекций
  9. *Алгоритмы* сортировки и прочее
  10. *Инфраструктурные интерфейсы* 
  11. *Утиллиты массивов*

  Интерфейсы коллекций:
  Находятся в java.util

  1. Set - набор
  2. SortedSet - сортированый набор, необходим Comporator или имплементация Comparable
  3. NavigableSet - сортированный список дополненный методами навигации
  4. Queue - очередь
  5. concurent.BlockingQueue - очередь расширенная методами *ожидания при получении элемента, если учередь пуста* и *ожидания свободного места при добавлении элемента.*
  6. concurent.TransferQueue - очередь в которой происходит ожидание получения-извлечения элемента. Одновременно вставляется и извлекается один элемент.
  7. Deque - дэк
  8. concurent.BlockingDeque - Дэк расширенный методами *ожидания при получении элемента, если учередь пуста* и *ожидания свободного места при добавлении элемента.*

  Интерфейсы *НЕ* коллекций:

  1. SortedMap - сортированая таблица соотношений, необходим Comporator или имплементация Comparable
  2. NavigableMap - расширение SortedMap с методами навигации
  3. ConcurentMap - получение и удаление элементов реализовано в соотвествии с приоритетом потоков, обращающихся к таблице. Гарантируется атомарносить и потокобезопастность операций.
  4. NavigableConcurentMap - смесь пункта 2 и 3
  